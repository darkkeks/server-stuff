version: "3.9"

services:

  # nginx

  nginx-proxy:
    image: jwilder/nginx-proxy:latest
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ./vhost.d:/etc/nginx/vhost.d
      - /srv/http/darkkeks.me:/srv/http/darkkeks.me
      - /etc/hse-bot-token:/etc/hse-bot-token
      - static-paste:/srv/http/paste.darkkeks.me/staticfiles

  # Пустой контейнер для nginx-proxy,
  # пока нету нормального содержимого для домена darkkeks.me
  dummy-host:
    build: ./dummy/
    restart: unless-stopped
    environment:
      - VIRTUAL_HOST=darkkeks.me

  # grafana

  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    volumes:
      - grafana-storage:/var/lib/grafana
    environment:
      - VIRTUAL_HOST=grafana.darkkeks.me
      - GF_SERVER_ROOT_URL=https://grafana.darkkeks.me

  grafana-backup:
    build: ./backup/grafana-backup
    restart: unless-stopped
    volumes:
      - grafana-storage:/var/lib/grafana
    environment:
      SCHEDULE: '@daily'
      S3_BUCKET: darkkeks-backups
      S3_PREFIX: grafana
    env_file:
      - ./.env.s3

  # prometheus

  prometheus:
    image: prom/prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus-storage:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=5y'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'

  pushgateway:
    image: prom/pushgateway
    restart: unless-stopped
    environment:
      - VIRTUAL_HOST=prometheus.darkkeks.me

  host-monitoring:
    image: prom/node-exporter
    command:
      - '--path.rootfs=/host'
    pid: host
    restart: unless-stopped
    volumes:
      - '/:/host:ro,rslave'

  # user-online

  user-online:
    build: ./online-tracker/
    restart: unless-stopped
    volumes:
      - ./online-tracker/config.ini:/app/config.ini
      - ./online-tracker/common.session:/app/common.session

  # kks-stat

  kks-stat:
    build:
      context: ./telegram-bots/
      dockerfile: ./kks-stat/deploy/Dockerfile
    restart: unless-stopped
    env_file:
      - ./.env.kks-stat
    environment:
      - VIRTUAL_HOST=kks.darkkeks.me

  postgres-kks:
    image: postgres:latest
    restart: unless-stopped
    environment:
      POSTGRES_DB: kks
      POSTGRES_PASSWORD: root
      PGDATA: /data/postgres
    volumes:
      - postgres-data-kks:/data/postgres

  postgres-kks-backup:
    build: ./backup/postgres-backup
    restart: unless-stopped
    environment:
      SCHEDULE: '@weekly'
      S3_BUCKET: darkkeks-backups
      S3_PREFIX: postgres-kks
      POSTGRES_HOST: postgres-kks
      POSTGRES_DATABASE: kks
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
    env_file:
      - ./.env.s3

  # hse-remind

  hse-remind:
    # build:
    #   context: ./telegram-bots/
    #   dockerfile: ./hse-remind/deploy/Dockerfile
    image: 4d7fe21a9467
    restart: unless-stopped
    env_file:
      - ./.env.hse-remind

  mongo-hse-remind:
    image: mongo:latest
    restart: unless-stopped
    volumes:
      - mongo-data-hse-remind:/data/db

  mongo-hse-remind-backup:
    build: ./backup/mongo-backup
    restart: unless-stopped
    environment:
      SCHEDULE: '@daily'
      S3_BUCKET: darkkeks-backups
      S3_PREFIX: mongo-hse-remind
      MONGO_HOST: mongo-hse-remind
      MONGO_DATABASE: test
    env_file:
      - ./.env.s3

  # vcoin

  vcoin-hangman:
    build: ./VCoinGame/
    restart: unless-stopped
    env_file:
      - ./.env.vcoin

  postgres-vcoin:
    image: postgres:latest
    restart: unless-stopped
    environment:
      POSTGRES_DB: vcoin
      POSTGRES_PASSWORD: root
      PGDATA: /data/postgres
    volumes:
      - postgres-data-vcoin:/data/postgres

  postgres-vcoin-backup:
    build: ./backup/postgres-backup
    restart: unless-stopped
    environment:
      SCHEDULE: '@daily'
      S3_BUCKET: darkkeks-backups
      S3_PREFIX: postgres-vcoin
      POSTGRES_HOST: postgres-vcoin
      POSTGRES_DATABASE: vcoin
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
    env_file:
      - ./.env.s3

  # openvpn

  openvpn-server:
    image: kylemanna/openvpn
    restart: unless-stopped
    ports:
      - "1194:1194/udp"
    cap_add:
      - NET_ADMIN
    volumes:
     - server-stuff_openvpn-data:/etc/openvpn

  # paste.darkkeks.me

  paste:
    build: ./CodepasteDjango
    restart: unless-stopped
    env_file: ./.env.paste
    environment:
      - DOMAIN=paste.darkkeks.me
      - POSTGRES_HOST=postgres-paste
      - POSTGRES_PORT=5432
      - POSTGRES_DB=paste
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=root
      - VIRTUAL_HOST=paste.darkkeks.me
    volumes:
      - static-paste:/app/staticfiles

  postgres-paste:
    image: postgres:latest
    restart: unless-stopped
    environment:
      POSTGRES_DB: paste
      POSTGRES_PASSWORD: root
      PGDATA: /data/postgres
    volumes:
      - postgres-data-paste:/data/postgres

  postgres-paste-backup:
    build: ./backup/postgres-backup
    restart: unless-stopped
    environment:
      SCHEDULE: '@daily'
      S3_BUCKET: darkkeks-backups
      S3_PREFIX: postgres-paste
      POSTGRES_HOST: postgres-paste
      POSTGRES_DATABASE: paste
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
    env_file:
      - ./.env.s3

  # neko

  neko:
    image: "ghcr.io/m1k1o/neko/firefox:latest"
    restart: "unless-stopped"
    shm_size: "2gb"
    expose:
      - 8080
    ports:
      - "52000-52100:52000-52100/udp"
    env_file:
      - ./.env.neko
    volumes:
      - neko-profile:/home/neko/.mozilla/firefox/profile.default
      - ./neko/policies.json:/usr/lib/firefox/distribution/policies.json
    environment:
      VIRTUAL_HOST: watch.darkkeks.me
      VIRTUAL_PORT: 8080
      NEKO_SERVER_METRICS: true
      NEKO_SERVER_PROXY: true
      NEKO_DESKTOP_SCREEN: 1920x1080@60
      NEKO_WEBRTC_EPR: 52000-52100
      NEKO_WEBRTC_ICELITE: true
      # Sessions disconnect after 60s behind nginx and increasing timeout in nginx didn't help.
      NEKO_SESSION_HEARTBEAT_INTERVAL: 10

volumes:
  grafana-storage:
  prometheus-storage:
  postgres-data-kks:
  mongo-data-hse-remind:
  postgres-data-vcoin:
  server-stuff_openvpn-data:
    external: true
  postgres-data-paste:
  static-paste:
  neko-profile:
